#!/usr/bin/env python
#-*- coding:utf-8 -*-

#  Copyright (C) 2010-2018  CEA/DEN
#
#  This library is free software; you can redistribute it and/or
#  modify it under the terms of the GNU Lesser General Public
#  License as published by the Free Software Foundation; either
#  version 2.1 of the License.
#
#  This library is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#  Lesser General Public License for more details.
#
#  You should have received a copy of the GNU Lesser General Public
#  License along with this library; if not, write to the Free Software
#  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA

"""\
This file is the main entry file to use salomeTools,
in mode Command Line Argument(s) (CLI)
"""

import os
import sys

# exit OKSYS and KOSYS seems equal on linux or windows
OKSYS = 0  # OK 
KOSYS = 1  # KO

# get path to salomeTools sources
satdir = os.path.dirname(os.path.realpath(__file__))

# Make the src & commands package accessible from all code
sys.path.insert(0, satdir)

import src.loggingSat as LOG
import src.debug as DBG # Easy print stderr (for DEBUG only)

logger = LOG.getDefaultLogger()

import traceback

def format_color_exception(msg, etype, value, tb, limit = None):
    """Format a stack trace and the exception information.
    as traceback.format_exception(), with color
    """
    res = "<red>" + msg + "<yellow>"
    if tb:
        res += "Traceback (most recent call last):\n"
        # print "tb"
        res += "".join(traceback.format_tb(tb, limit)) #[:-1])
    res += "\n<red>"
    res += "\n".join(traceback.format_exception_only(etype, value))
    return res+ "<reset>"
  
#################################
# MAIN
#################################
if __name__ == "__main__":
    from src.salomeTools import Sat # it is time...
    
    _debug = False # Have to be False in production (for programmers DEBUG only)
    DBG.push_debug(_debug) # as __main__ with sys.exit so no need pop_debug

    sat = Sat(logger) # instantiate the salomeTools class
    args = sys.argv[1:] # skip useless "sat'
   
    try:
      returnCode = sat.execute_cli(args)
      if returnCode.isOk():
        logger.debug("sat exit code: %s" % returnCode) # OK no trace
      else:
        logger.error("sat exit code: %s" % returnCode) # KO say why
      sys.exit(returnCode.toSys())
      
    except Exception as e:
      # verbose debug message with traceback if developers
      msg = "Exception raised for execute_cli(%s):\n" % args
      logger.critical(DBG.format_color_exception(msg))  
      sys.exit(KOSYS)

else:
    logger.critical("forbidden/unexpected mode for __name__ '%s'" % __name__)
    sys.exit(KOSYS)
            


 